<?php
/**
 * Implements hook_menu()
 */
function table_api_demo_menu(){
    $items = array(
        'tapi/demo'            =>    array(
            'title'              =>    'Table API demo',
            'page callback'      =>    'drupal_get_form',
            'page arguments'     =>    array('table_api_demo_form'),
            'access callback'    =>    true,
            'type'               =>    MENU_LOCAL_TASK,
        ),
    );
    return $items;
}

/**
 * Table API demo form
 */
function table_api_demo_form($form, &$form_state){
    //This JS file hooks into tapi add condition function to provide filtering
    $module_path = drupal_get_path('module', 'table_api_demo');
    drupal_add_js($module_path . '/js/table_api_demo.js');

    $form['description'] = array(
        '#type' => 'item',
        '#title' => 'Table API (tapi) Demo',
        '#description' => 'This demo aims to show different applications for tapi: viewing, paging, sorting, editing, deleting, inserting and searching. Although this demo comprises of all features, it is possible to only implement certain features. Requires jQuery 1.7+'
    );

    $form['filter_field1'] = array(
        '#title' => 'Field1',
        '#type' => 'textfield',
        '#description' => 'Filter results by field1 (WHERE field1 LIKE)'
    );

    $form['tapi_search'] = array(
        '#type' => 'button', 
        '#value' => t('Search'), 
    );

    $form['rebuild_demo_data'] = array(
        '#type' => 'submit',
        '#value' => t('Rebuild demo data'),
        '#submit' => array('table_api_demo_rebuild_data')
    );
    
    //construct query we want to display
    db_set_active();
    $query = db_select('tapi_demo')
        ->fields('tapi_demo',array('id','field1', 'field2', 'field3'));
    //we add format field again, but this time we call it 'link'
    //and use a callback hook to turn the cell data into a hyperlink
    $query->addExpression('field1', 'link');
    db_set_active();
    
    $data = array();
    //mandatory fields
    $data['query'] = $query;
    $data['limit'] = 20; //Limit per page
    $data['sort'] = 'asc'; //Default sort order
    $data['order'] = 'id'; //Default sort column
    $data['page'] = 0; //Default start page
    //optional fields
    $data['delete'] = 'id'; //enables deletion with dfid as delete condition
    $data['editable'] = array('field1', 'field2'); //enables editing following fields
    $data['update_cond'] = 'id'; //update condition field (required when updating is enabled)
    $data['insert'] = true; //enable insertion of new rows

    //Cell callbacks must be implemented in .module files, see table_api.module for
    //tapi_demo_cell_alter($column, &$cell, $index) implementation
    $data['cell_callback'] = 'table_api_demo_cell_alter';

    $form['table_data'] = array(
        '#type' => 'markup',
        '#markup' => table_api_render($data)
    );

    $form['insert_description'] = array(
        '#type' => 'item',
        '#title' => 'Inserting data',
        '#description' => "'id'(auto_increment) and 'field2'(blank) have default values, therefore there is no need to fill in these fields when inserting data. 'link' is not an actual database field (field1 as link), therefore it is missing an input for insertion."
    );

    return $form;
}

/**
 * Cell altering callback should be placed in .module files so that
 * the function is available in any common bootstrap scenario as
 * .inc files are only loaded on-demand. This callback enables us to
 * do custom processing of the cell contents before it is displayed.
 * Registering a callback looks like this:
 * $data['cell_callback'] = 'tapi_demo_cell_alter';
 * @param string $column - column name
 * @param array $cell - cell with all properties
 * @param int $index - row index
 */
function table_api_demo_cell_alter($column, &$cell, $index){
    $options = array('attributes' => array('class' => 'btn btn-info'));
    if($column == 'link'){
        $cell['data'] = l($cell['data'], 'https://duckduckgo.com/?q='.$cell['data'], $options );
    }
}


function table_api_demo_rebuild_data($form, &$form_state){
    table_api_demo_sample_data();
    drupal_set_message('Demo data re-populated');
}

function table_api_demo_sample_data(){
    db_truncate('tapi_demo')->execute();
    $sample_data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
    $sample_data = explode(' ', $sample_data);
    $insert = db_insert('tapi_demo')
    ->fields(array('field1', 'field2', 'field3'));
    $sample2 = 888;
    foreach($sample_data as $sample){
        $sample2--;
        $random = rand(0, 5) >= 5 ? 1 : 0;
        $insert->values(array($sample, $sample2, $random));
    }
    $insert->execute();
}

